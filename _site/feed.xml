<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2018-04-01T03:48:12+08:00</updated><id>http://localhost:4000/</id><title type="html">a Saleana</title><subtitle>a Saleana
</subtitle><author><name>Jia</name></author><entry><title type="html">Blog View Count</title><link href="http://localhost:4000/2018/03/28/view-count.html" rel="alternate" type="text/html" title="Blog View Count" /><published>2018-03-28T00:00:00+08:00</published><updated>2018-03-28T00:00:00+08:00</updated><id>http://localhost:4000/2018/03/28/view-count</id><content type="html" xml:base="http://localhost:4000/2018/03/28/view-count.html">&lt;p&gt;This is a sad story.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Though I could receive data from visitng my articles and found them on LeanCloud, the view count was not updated. I found there were javascript codes inserted in _layouts/home.html and _layouts/post.html, but even uncommenting them didn’t make a difference. A way to manipulate view count is in _includes/components/article-data.html - simply make the 0 to any other number. This change applies to all articles of course. I double-checked the developer’s git page but found identical code. So it is not the fault of code? What is the problem then?&lt;/p&gt;

&lt;p&gt;Thanks to Qi this desperation was terminated. Changing the authorization control of my blog_counter class created in LeadCloud solved the problem. First, manually make ACL(Access Control List) for each existing object (i.e. blog post) which has 0 views to &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;write&quot;:true&lt;/code&gt; for all users. Then existing posts can increment views based on visitor clicks. (Not granting read access for all users doesn’t seem to be a problem for view count. Though manipulating these two parameters may create multipe object for the same post which makes it hard to maintain a unique real view count.) Second, grant write access for all users under ACL column setting: &lt;code class=&quot;highlighter-rouge&quot;&gt;{&quot;_owner&quot;:{&quot;read&quot;:true,&quot;write&quot;:true},&quot;*&quot;:{&quot;read&quot;:true,&quot;write&quot;:true}}&lt;/code&gt;. Then new created posts will be able to count views! Yay!!!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A happy ending.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Jia</name></author><category term="other" /><summary type="html">This is a sad story.</summary></entry><entry><title type="html">Project NinjaGo Intro</title><link href="http://localhost:4000/2018/03/25/popeyes.html" rel="alternate" type="text/html" title="Project NinjaGo Intro" /><published>2018-03-25T00:00:00+08:00</published><updated>2018-03-25T00:00:00+08:00</updated><id>http://localhost:4000/2018/03/25/popeyes</id><content type="html" xml:base="http://localhost:4000/2018/03/25/popeyes.html">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhong240/zhong240.github.io/master/post_images/ninjago_mainmenu.png&quot; alt=&quot;doxygen2016&quot; /&gt;&lt;/p&gt;

&lt;p&gt;NinjaGo is a 2D Platform Game implemented in C++ using SDL library. NinjaGo is superior to peer projects in the sense of its design architecture. The classes are well-organized and ready for further implementation. Here is a detailed but also condensed walkthrough of the basic class hierarchy.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;class-list&quot;&gt;Class List&lt;/h2&gt;

&lt;p&gt;Collider &amp;amp; GameObject:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bullet, Collectible, Hero, Minion, Powerup, Tile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Menu:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;InstructionMenu, MainMenu, PassMenu, PauseMenu, SettingsMenu, WinMenu, LoseMenu&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;System:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CollisionSystem, ControlSystem, DisplaySystem, GameSetting, PlaySystem, ResourceManager, SoundSystem, TileMapSystem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other/Utilities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Camera, CAnimation, Collision, LButton, LTexture, LTimer, MainProgram, TileMap, Vector2D&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;collider--gameobject&quot;&gt;Collider &amp;amp; GameObject:&lt;/h2&gt;

&lt;h6 id=&quot;gameobject&quot;&gt;GameObject&lt;/h6&gt;
&lt;p&gt;A GameObject is the basic unit of the game. It is a base class to be inherited.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;velocty, position, acceleartion, etc&lt;/li&gt;
  &lt;li&gt;tag: used to identify what object it is&lt;/li&gt;
  &lt;li&gt;animationControl: how to generate animation&lt;/li&gt;
  &lt;li&gt;poseCode: which pose the character is having at current frame&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;collider&quot;&gt;Collider&lt;/h6&gt;
&lt;p&gt;A Collider is the interactive component of the game.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;boundingBox&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;colDir: normal vector of the collider&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;onCollide(Collider c): compare whether two bounding boxes overlap &lt;em&gt;(To be updated)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;bullet&quot;&gt;Bullet&lt;/h6&gt;
&lt;p&gt;A simple class.&lt;/p&gt;

&lt;h6 id=&quot;collectible&quot;&gt;Collectible&lt;/h6&gt;
&lt;p&gt;A Collectible refers to coin-like game objects the player can collect along the gameplay.&lt;/p&gt;

&lt;h6 id=&quot;hero&quot;&gt;Hero&lt;/h6&gt;
&lt;p&gt;The hero class only sets up the basic info. Collision is handled via CollisionSystem, receiving and processing player input data is handled by ControlSystem.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;getId(): allows for future multiplayer implemetation&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;minion&quot;&gt;Minion&lt;/h6&gt;
&lt;p&gt;Analogous to hero class.&lt;/p&gt;

&lt;h6 id=&quot;powerup&quot;&gt;Powerup&lt;/h6&gt;
&lt;p&gt;Similar to minion class.&lt;/p&gt;

&lt;h6 id=&quot;tile&quot;&gt;Tile&lt;/h6&gt;
&lt;p&gt;Tile is slightly different than the other elements of GameObject &amp;amp; Collider, because it doesn’t move.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;tileId: &lt;em&gt;(To be updated)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;index: the “id” of the specific region of a tile source file; this is for rendering the correct tile piece&lt;/li&gt;
  &lt;li&gt;tileType: whether it is ground or not&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;menu&quot;&gt;Menu:&lt;/h2&gt;
&lt;p&gt;Menu is a layer to display current content. It is an abstract base class.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum MENU_MESSAGE{
    MENU_NONE = 1,
    MENU_QUIT = 2,
    MENU_RETURN = 3
};
virtual bool loadMedia();
virtual MENU_MESSAGE accept();
virtual void show();
virtual void destroy();
virtual void render();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;mainmenu&quot;&gt;MainMenu&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;Constructor: call init() and loadMeadia()&lt;/li&gt;
  &lt;li&gt;init(): create button for each option, set button position, add button to button map &lt;em&gt;(To be updated: mouse out, hover, down, up)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;loadMedia(): load texture &lt;em&gt;(To be updated: stringstream)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;accept(): &lt;em&gt;(To be updated)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;label: &lt;em&gt;(To be updated)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;render(): render button then render label&lt;/li&gt;
  &lt;li&gt;show(): a loop to determine SDL_event; will jump to other menu(interface/layer); then call render()&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;instructionmenu&quot;&gt;InstructionMenu&lt;/h6&gt;
&lt;p&gt;Similar to MainMenu class, but simpler because there are less chocies of what menus it can jump to.&lt;/p&gt;

&lt;h6 id=&quot;passmenu&quot;&gt;PassMenu&lt;/h6&gt;
&lt;p&gt;Even simpler than InstructionMenu because PassMenu represents the passing scene of the game (i.e., level 1 passes; now click to play level 2).&lt;/p&gt;

&lt;h6 id=&quot;pausemenu&quot;&gt;PauseMenu&lt;/h6&gt;
&lt;p&gt;Similar to other menus.&lt;/p&gt;

&lt;h6 id=&quot;settingsmenu&quot;&gt;SettingsMenu&lt;/h6&gt;
&lt;p&gt;Similar to other menus.&lt;/p&gt;

&lt;h6 id=&quot;winmenulosemenu&quot;&gt;WinMenu/LoseMenu&lt;/h6&gt;
&lt;p&gt;A scene to display win/lose message. Similar to other menus.&lt;/p&gt;

&lt;h4 id=&quot;system&quot;&gt;System&lt;/h4&gt;
&lt;p&gt;All systems use singleton design pattern. Only one instance is necessary to function well.&lt;/p&gt;

&lt;h6 id=&quot;collisionsystem&quot;&gt;CollisionSystem&lt;/h6&gt;
&lt;p&gt;The core of this game.
&lt;em&gt;(To be updated: 800+ lines of code)&lt;/em&gt;&lt;/p&gt;

&lt;h6 id=&quot;controlsystem&quot;&gt;ControlSystem&lt;/h6&gt;
&lt;p&gt;&lt;em&gt;(To be updated)&lt;/em&gt;&lt;/p&gt;

&lt;h6 id=&quot;displaysystem&quot;&gt;DisplaySystem&lt;/h6&gt;
&lt;p&gt;Init SDL library and then loadMedia() using ResourceManager. The main function is to render game objects (i.e., hero, minions, bullets, etc), menus (differnet scenes), and game info (i.e. current level, life, etc).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;update(): &lt;em&gt;(To be updated: invoke TileMapSystem)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;updateMapTexture(): different cases on what current level is, so different map can be aquired accordingly&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;gamesetting&quot;&gt;GameSetting&lt;/h6&gt;
&lt;p&gt;GameSetting is a container of the “game data”, such as levels, score, minions.
&lt;em&gt;(To be updated)&lt;/em&gt;&lt;/p&gt;

&lt;h6 id=&quot;playsystem&quot;&gt;PlaySystem&lt;/h6&gt;
&lt;p&gt;For now I will say PlaySystem monitors the state of the game.  The hero status, minion status, and other interactive game components will get updated, but this update doesn’t involve collision. The game status will be checked (win/lose).&lt;/p&gt;

&lt;h6 id=&quot;resourcemanager&quot;&gt;ResourceManager&lt;/h6&gt;
&lt;p&gt;Load resources including textures, videos and audios from files.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Also loads languages&lt;/li&gt;
  &lt;li&gt;tile maps&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;soundsystem&quot;&gt;SoundSystem&lt;/h6&gt;
&lt;p&gt;Render music and sound effects.&lt;/p&gt;

&lt;h6 id=&quot;tilemapsystem&quot;&gt;TileMapSystem&lt;/h6&gt;
&lt;p&gt;&lt;em&gt;(To be updated)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;otherutilities&quot;&gt;Other/Utilities:&lt;/h2&gt;

&lt;h6 id=&quot;camera&quot;&gt;Camera&lt;/h6&gt;
&lt;p&gt;Also a singleton class. The camera always focuses on the hero.
&lt;em&gt;(To be updated)&lt;/em&gt;&lt;/p&gt;

&lt;h6 id=&quot;canimation&quot;&gt;CAnimation&lt;/h6&gt;
&lt;p&gt;CAnimation only takes care of calculating the correct frame and then the other system &lt;em&gt;(To be updated)&lt;/em&gt; can render correct pose from spritesheet.&lt;/p&gt;

&lt;h6 id=&quot;collision&quot;&gt;Collision&lt;/h6&gt;
&lt;p&gt;&lt;em&gt;(To be updated)&lt;/em&gt; Handle collisions between GameObject and Tile.&lt;/p&gt;

&lt;h6 id=&quot;lbutton&quot;&gt;LButton&lt;/h6&gt;
&lt;p&gt;A wrapper class for SDL_Button.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;handleEvent(SDL_Event* e): check whether this button is clicked and then invoke relative actions&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(To be updated)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;ltimer&quot;&gt;LTimer&lt;/h6&gt;
&lt;p&gt;A timer used for keep trakcing of frame rate.&lt;/p&gt;

&lt;h6 id=&quot;ltexture&quot;&gt;LTexture&lt;/h6&gt;
&lt;p&gt;A wrapper class for SDL_Texture.
&lt;em&gt;(To be updated)&lt;/em&gt;&lt;/p&gt;

&lt;h6 id=&quot;mainprogram&quot;&gt;MainProgram&lt;/h6&gt;
&lt;p&gt;Singleton design pattern is used becasue there is only main program. It has init(), loop(), and run().&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;init(): init ResourceManager, GameSetting, ControlSystem, PlaySystem, CollisionSystem, then DisplaySystem&lt;/li&gt;
  &lt;li&gt;run(): play bgm and then loop()&lt;/li&gt;
  &lt;li&gt;loop():
    &lt;ol&gt;
      &lt;li&gt;start timer&lt;/li&gt;
      &lt;li&gt;monitor events&lt;/li&gt;
      &lt;li&gt;update CollisionSystem, PlaySystem, Camera, and last DisplaySystem&lt;/li&gt;
      &lt;li&gt;check win/lose&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;tilemap&quot;&gt;TileMap&lt;/h6&gt;
&lt;p&gt;&lt;em&gt;(To be updated)&lt;/em&gt;&lt;/p&gt;

&lt;h6 id=&quot;vector2d&quot;&gt;Vector2D&lt;/h6&gt;
&lt;p&gt;A small 2D vector “math library” which allows for basic vector operations.
It may also serves as a tuple for any two-component variables, such as velocity, position, etc.&lt;/p&gt;</content><author><name>Jia</name></author><category term="project" /><summary type="html">NinjaGo is a 2D Platform Game implemented in C++ using SDL library. NinjaGo is superior to peer projects in the sense of its design architecture. The classes are well-organized and ready for further implementation. Here is a detailed but also condensed walkthrough of the basic class hierarchy.</summary></entry><entry><title type="html">Doxygen CheatSheet</title><link href="http://localhost:4000/2018/03/25/doxygen.html" rel="alternate" type="text/html" title="Doxygen CheatSheet" /><published>2018-03-25T00:00:00+08:00</published><updated>2018-03-25T00:00:00+08:00</updated><id>http://localhost:4000/2018/03/25/doxygen</id><content type="html" xml:base="http://localhost:4000/2018/03/25/doxygen.html">&lt;p&gt;This is a easy start guide which contains some basic Doxygen config tag introduction.&lt;/p&gt;

&lt;!--more--&gt;

&lt;dl&gt;
  &lt;dt&gt;Generate a Doxygen config file named &lt;em&gt;Doxyfile&lt;/em&gt;&lt;/dt&gt;
  &lt;dd&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doxygen -g Doxyfile&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;Use Doxygen with that config file &lt;em&gt;Doxyfile&lt;/em&gt; for generating docs&lt;/dt&gt;
  &lt;dd&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doxygen Doxyfile&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;Change the project name that will be displayed in the manual&lt;/dt&gt;
  &lt;dd&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_NAME           = &quot;Cool Project&quot;&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;Select which files are used for generating the doc&lt;/dt&gt;
  &lt;dd&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;INPUT                  = ../include ../src&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;Get rid of “The documentation for this class was generated from the following files”&lt;/dt&gt;
  &lt;dd&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SHOW_USED_FILES        = NO&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;Or remove the absolute path and just show file names&lt;/dt&gt;
  &lt;dd&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FULL_PATH_NAMES        = NO&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;Or remove portion of the absoute path&lt;/dt&gt;
  &lt;dd&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;STRIP_FROM_PATH        = /Users/myName/Documents/&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;Also document private members&lt;/dt&gt;
  &lt;dd&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EXTRACT_PRIVATE        = YES&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;Include a tree hierarchy at the left side of the page&lt;/dt&gt;
  &lt;dd&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GENERATE_TREEVIEW      = YES&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;Remove quick index tab(s)&lt;/dt&gt;
  &lt;dd&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DISABLE_INDEX          = NO&lt;/code&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;h4 id=&quot;something-else&quot;&gt;Something Else&lt;/h4&gt;
&lt;p&gt;I used Doxgen in 2016 and the html pages generated showed an expanded class list, class hierarchy, class members, etc. However, in 2018 Doxygen seemed to have changed this presentation. Indeed, an inverted triangle icon is used for those tabs. The problem is that clicking on “Classes”  directly jumps to the class list. While the pages of class hierarchy and others still get generated, I cannot directly access them anymore with the default setting. Maybe some simple code change in the html fies will solve this problem, but that’s something I need to dip into a little before I figure it out.&lt;/p&gt;

&lt;p&gt;Here are the screenshots to demonstrate the difference I mentioned above.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhong240/zhong240.github.io/master/post_images/doxygen2016.png&quot; alt=&quot;doxygen2016&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhong240/zhong240.github.io/master/post_images/doxygen2018.png&quot; alt=&quot;doxygen2018&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the full documentation please visit &lt;a href=&quot;http://www.stack.nl/~dimitri/doxygen/manual/config.html&quot;&gt;Doxygen Config Manual&lt;/a&gt;.&lt;/p&gt;</content><author><name>Jia</name></author><category term="tools" /><summary type="html">This is a easy start guide which contains some basic Doxygen config tag introduction.</summary></entry><entry><title type="html">A Note about Timer</title><link href="http://localhost:4000/2018/03/24/timer.html" rel="alternate" type="text/html" title="A Note about Timer" /><published>2018-03-24T00:00:00+08:00</published><updated>2018-03-24T00:00:00+08:00</updated><id>http://localhost:4000/2018/03/24/timer</id><content type="html" xml:base="http://localhost:4000/2018/03/24/timer.html">&lt;p&gt;Main components of a Timer class implemented in C++. I used to have a hard time thinking this through, so I guess I’d better keep a note of it.&lt;/p&gt;

&lt;!--more--&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Private variable needed
Unit32 startTicks = 0; // This is indeed the starting time
Unit32 pausedTicks = 0; // This is indeed the length of pasued time
bool started; // This is not illustrated in this example
bool pasued;

// Note: SDL_GetTicks() will return the current clock time; it is given by the SDL library (std library time.h also works)

// Three key functions shown below

Timer::pause() {
	if (!pasued) {
		paused = true;		
		// How long the timer has started;
		// When pause() is called, the timer screen freezes to display this time
		pausedTicks = SDL_GetTicks() - startTicks;
		// When pasue() is called, startTicks initializes
		startTicks = 0;
	}
}

Timer::unpause() {
	if (paused) {
		pasued = false;
		// Subtract the paused time, as if it never pauses
		startTicks = SDL_GetTicks() - pausedTicks;
		// Paused time for this round is no longer needed after we unpause the timer
		pausedTicks = 0;
	}
}

Unit32 Timer::getDisplayTime() {
	Unit32 time = 0;
	if( paused ) {
		// When pasued, display this fixed value
		time = pausedTicks;
	}
	else {
		// Normal case, simply subtracting starting time from current time
		time = SDL_GetTicks() - startTicks;
	}
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hopefully this is a sufficiently clear explanation of how a timer works!&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Jia</name></author><category term="basics" /><summary type="html">Main components of a Timer class implemented in C++. I used to have a hard time thinking this through, so I guess I’d better keep a note of it.</summary></entry><entry><title type="html">Programming Basics 编程的一些基本常识</title><link href="http://localhost:4000/2018/03/19/programming-basics.html" rel="alternate" type="text/html" title="Programming Basics 编程的一些基本常识" /><published>2018-03-19T00:00:00+08:00</published><updated>2018-03-19T00:00:00+08:00</updated><id>http://localhost:4000/2018/03/19/programming-basics</id><content type="html" xml:base="http://localhost:4000/2018/03/19/programming-basics.html">&lt;p&gt;每天学一点。先写中文的。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h4 id=&quot;ide-integrated-development-environment集成开发环境&quot;&gt;IDE: Integrated Development Environment 集成开发环境&lt;/h4&gt;

&lt;p&gt;IDE是应用程序。代码编辑器。可以有额外的编译功能、设计UI功能。&lt;/p&gt;

&lt;p&gt;如: Visual Studio, Android Studio, NetBeans(Oracle, Java), Eclipse, Xcode.&lt;/p&gt;

&lt;p&gt;Sorce code editor is a part of IDE.&lt;/p&gt;

&lt;p&gt;Example: Sublime text, Atom&lt;/p&gt;

&lt;h4 id=&quot;api-application-programming-interface-应用程序编程接口&quot;&gt;API: Application Programming Interface 应用程序编程接口&lt;/h4&gt;

&lt;p&gt;可以理解为定义的函数将会被如何使用。接口是一个媒介, 连接两端的内容。&lt;/p&gt;

&lt;p&gt;Interface的一个较好翻译是”交互”。比如User Interace, 一般的翻译为用户操作界面, 实际上是人与软件的交互过程——人输入数据, 程序输出结果。&lt;/p&gt;

&lt;p&gt;还有一种理解, API是产品经理为客户提供的产品。产品怎么做的客户并不知道, 但是客户知道有哪些产品可用以及如何使用就好。&lt;/p&gt;

&lt;h4 id=&quot;sdk-software-development-kit-软件开发工具组&quot;&gt;SDK: Software Development Kit 软件开发工具组&lt;/h4&gt;

&lt;p&gt;意如其名, 写软件的开发工具。&lt;/p&gt;

&lt;p&gt;SDK跟IDE容易混淆, 简单来说SDK更底层, 是基本平台; IDE是加了一堆插件的SDK。&lt;/p&gt;

&lt;p&gt;“A set of software development tools that allows the creation of applications for a certain software package, software framework, hardware platform, computer system, video game console, operating system, or similar development platform.”(Wikipedia)&lt;/p&gt;

&lt;h4 id=&quot;ddl-dynamic-link-library-动态链接库&quot;&gt;DDL: Dynamic Link Library 动态链接库&lt;/h4&gt;
&lt;p&gt;“在Windows中，许多应用程序并不是一个完整的可执行文件，它们被分割成一些相对独立的动态链接库，即DLL文件，放置于系统中。当我们执行某一个程序时，相应的DLL文件就会被调用。一个应用程序可有多个DLL文件，一个DLL文件也可能被几个应用程序所共用。” (百度百科)&lt;/p&gt;

&lt;p&gt;相当于代码被模块化。因此一个好处是代码可以分开编译, 提高debug效率。另一个好处是在程序运行时候占用的内存变小, 因为只有需要的时候才调用某些模块。&lt;/p&gt;

&lt;h4 id=&quot;junit&quot;&gt;Junit&lt;/h4&gt;

&lt;p&gt;Unit testing framework for Java. 这个是要学的。&lt;/p&gt;</content><author><name>Jia</name></author><category term="basics" /><summary type="html">每天学一点。先写中文的。</summary></entry><entry><title type="html">Programmer Advanced 程序员的素养</title><link href="http://localhost:4000/2018/03/19/programmer-advanced.html" rel="alternate" type="text/html" title="Programmer Advanced 程序员的素养" /><published>2018-03-19T00:00:00+08:00</published><updated>2018-03-19T00:00:00+08:00</updated><id>http://localhost:4000/2018/03/19/programmer-advanced</id><content type="html" xml:base="http://localhost:4000/2018/03/19/programmer-advanced.html">&lt;p&gt;每天学一点。先写中文的。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h4 id=&quot;tensorflow&quot;&gt;TensorFlow&lt;/h4&gt;

&lt;p&gt;这个最近提到的非常多, 有必要了解一下(即使我不是真的那么感兴趣)。&lt;/p&gt;

&lt;p&gt;目前的了解是, TensorFlow是一个google po出来的machine learning开源library。因为很先进而且开源所以火起来了吧(大概)。&lt;/p&gt;

&lt;p&gt;中文介绍/入门教学：
&lt;a href=&quot;http://www.tensorfly.cn/tfdoc/get_started/introduction.html&quot;&gt;http://www.tensorfly.cn/tfdoc/get_started/introduction.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我还没来得及读。&lt;/p&gt;

&lt;h4 id=&quot;apache&quot;&gt;Apache&lt;/h4&gt;

&lt;p&gt;Web server, 一款软件。只支持html, 静态网页。&lt;/p&gt;

&lt;p&gt;“Apache是以进程为基础的结构，进程要比线程消耗更多的系统开支，不太适合于多处理器环境，因此，在一个Apache Web站点扩容时，通常是增加服务器或扩充群集节点而不是增加处理器。”(百度百科)&lt;/p&gt;

&lt;h4 id=&quot;multiprocess-vs-multithread-多进程与多线程&quot;&gt;Multiprocess vs. Multithread 多进程与多线程&lt;/h4&gt;

&lt;p&gt;在知乎上看到一个非常有趣的例子, 贴在这里。&lt;/p&gt;

&lt;p&gt;1。单进程单线程：一个人在一个桌子上吃菜。2。单进程多线程：多个人在同一个桌子上一起吃菜。3。多进程单线程：多个人每个人在自己的桌子上吃菜。&lt;/p&gt;

&lt;p&gt;多线程的问题是多个人同时吃一道菜的时候容易发生争抢，例如两个人同时夹一个菜，一个人刚伸出筷子，结果伸到的时候已经被夹走菜了。。。此时就必须等一个人夹一口之后，在还给另外一个人夹菜，也就是说资源共享就会发生冲突争抢。&lt;/p&gt;

&lt;p&gt;1。对于 Windows 系统来说，【开桌子】的开销很大，因此 Windows 鼓励大家在一个桌子上吃菜。因此 Windows 多线程学习重点是要大量面对资源争抢与同步方面的问题。&lt;/p&gt;

&lt;p&gt;2。对于 Linux 系统来说，【开桌子】的开销很小，因此 Linux 鼓励大家尽量每个人都开自己的桌子吃菜。这带来新的问题是：坐在两张不同的桌子上，说话不方便。因此，Linux 下的学习重点大家要学习进程间通讯的方法。&lt;/p&gt;

&lt;p&gt;–补充：有人对这个开桌子的开销很有兴趣。我把这个问题推广说开一下。开桌子的意思是指创建进程。开销这里主要指的是时间开销。可以做个实验：创建一个进程，在进程中往内存写若干数据，然后读出该数据，然后退出。此过程重复 1000 次，相当于创建/销毁进程 1000 次。在我机器上的测试结果是：&lt;/p&gt;

&lt;p&gt;UbuntuLinux：耗时 0.8 秒&lt;/p&gt;

&lt;p&gt;Windows7：耗时 79.8 秒&lt;/p&gt;

&lt;p&gt;两者开销大约相差一百倍。&lt;/p&gt;

&lt;p&gt;这意味着，在 Windows 中，进程创建的开销不容忽视。换句话说就是，Windows 编程中不建议你创建进程，如果你的程序架构需要大量创建进程，那么最好是切换到 Linux 系统。&lt;/p&gt;

&lt;p&gt;大量创建进程的典型例子有两个，一个是 gnu autotools 工具链，用于编译很多开源代码的，他们在 Windows 下编译速度会很慢，因此软件开发人员最好是避免使用 Windows。另一个是服务器，某些服务器框架依靠大量创建进程来干活，甚至是对每个用户请求就创建一个进程，这些服务器在 Windows 下运行的效率就会很差。这”可能”也是放眼全世界范围，Linux  服务器远远多于 Windows 服务器的原因。(作者：pansz
&lt;a href=&quot;https://www.zhihu.com/question/19901763/answer/13299543&quot;&gt;https://www.zhihu.com/question/19901763/answer/13299543&lt;/a&gt;
)&lt;/p&gt;

&lt;h4 id=&quot;combinatorial-optimization-组合优化问题&quot;&gt;Combinatorial optimization 组合优化问题&lt;/h4&gt;

&lt;p&gt;A topic in applied mathematics and theoretical computer science to find the optimal object from a finite set of objects.&lt;/p&gt;

&lt;p&gt;Applications:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;TSP (Traveling Salesman Problem)&lt;/li&gt;
  &lt;li&gt;MSP (Minimum Spanning Tree)&lt;/li&gt;
  &lt;li&gt;Scheduling Problem&lt;/li&gt;
  &lt;li&gt;Knapsack Problem&lt;/li&gt;
  &lt;li&gt;Bin Packing Problem&lt;/li&gt;
  &lt;li&gt;Graph Coloring Problem&lt;/li&gt;
  &lt;li&gt;Vehicle Routing Problem&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jia</name></author><category term="advanced" /><summary type="html">每天学一点。先写中文的。</summary></entry><entry><title type="html">Second Post</title><link href="http://localhost:4000/2018/03/10/second-post.html" rel="alternate" type="text/html" title="Second Post" /><published>2018-03-10T00:00:00+08:00</published><updated>2018-03-10T00:00:00+08:00</updated><id>http://localhost:4000/2018/03/10/second-post</id><content type="html" xml:base="http://localhost:4000/2018/03/10/second-post.html">&lt;p&gt;Now there are two posts.&lt;/p&gt;</content><author><name>Jia</name></author><category term="other" /><summary type="html">Now there are two posts.</summary></entry><entry><title type="html">First Post</title><link href="http://localhost:4000/2018/03/10/first-post.html" rel="alternate" type="text/html" title="First Post" /><published>2018-03-10T00:00:00+08:00</published><updated>2018-03-10T00:00:00+08:00</updated><id>http://localhost:4000/2018/03/10/first-post</id><content type="html" xml:base="http://localhost:4000/2018/03/10/first-post.html">&lt;p&gt;This is the very first post.&lt;/p&gt;</content><author><name>Jia</name></author><category term="other" /><summary type="html">This is the very first post.</summary></entry></feed>